MIT Intro to CS with Python

Unit 1 Lecture 2: Introduction to Python
***************************

IDE: Integrated Development Environment
Contains: Text editor, Shell, Debugger.

OBJECTS
Everything in Python is an object.
!!!Criticism: if everything is an object then what the fuck does it mean to be an object? What is the distinguishing characteristic? It means nothing in and of itself. As they say in the book of tao: without ugly there is no beautiful!!!
Every object has a type. You can do different things with different types.
# type(ldkfjdlhf) tells you the type
The two fundamental types are scalar and non-scalar.

Scalars
A scalar is indivisible(unless you want something crazy to happen).
Kinds of scalars:
Integers (dividing with integers always returns integers)
Floats: approximations of real numbers.
Booleans: True, False.
None: type(None) will give NoneType. Kind of a placeholder.
Strings: anything enclosed in quotes. Note, quotes aren't printed

Literals: Things you can type? Operands?
Expression: Sequence of operands(objects) and operators

Overloaded operators have a meaning that depends on the type of the operands. 
Example: +. With numbers it adds, with strings it concatenates.
Another example: / 

int() can convert floats and strings containing integers. 
When converting floats it takes the number to the left of the decimal. No rounding.

Program = Script(like a movie script, Monty Python?): a sequence of commands/expressions.

Different languages have different notions of what a variable means
In Python a variable is the name of an object.
Assignment binds a name to an object.
= is the assignment operator
name on the left, value(object?) on the right.

Remember: raw_input() returns strings, only strings.

Straight-Line vs. Branching Programs

Straight-Line: Every command is executed once, line by line.
Branching: Contain conditionals. If, Else, Elif. Each command executed at most once.
Turing Complete: contain Looping Constructs, Iteration. Commands can be executed an arbitrary number of times.

<, >, >=, <=, !=, == test relationships between objects, return booleans

Comment your code to make it as easy to debug as possible. This is the point of comments.

Branching and Straight-Line programs' runtime is determined by the number of commands executed.
Turing complete programs' runtime is determined by the amount of data processed.

RECITATION NOTES

Computers read 1's and 0's. 
Programming languages are designed for human readability.

Syntax: the order in which operators and operands are allowed to be entered
Static Semantics: which operands work with which operators
Semantics: 6/0 is a semantic error.
Operand Operator Operand. The syntax is correct.
int divide int. The Static Semantics are correct.

Boolean operands: True, False
Boolean operator: And, Or, Not

For loops are for iterating over a finite array of data
While loops execute as long as a condition is true (one or more objects the condition tests is modified with each go through the loop)

------------------------------------------------------------
Guttag Notes
 
A shell is the environment in which a language reads sourecode.

A command/statement instructs the interpreter to do something. Are there any besides print and return?

An object's type sets down what a program can do to it, what kind of manipulation it is amiable to

Scalar objects have no internal structure that can be decomposed. 
They include: integers, floats, strings, booleans, and None.
Non-Scalar objects are divisible. What exactly does that mean? How does one divide a list?
???What does it mean to divide a list???
Rather do we mean that non-scalar objects have parts that we can manipulate individually?
???is a tuple scalar???
???Why isn't a string a scalar, apparently it is?

???Are all literals scalars???

Floats can be written x.yEz == x.y*10**z

# type(ldkfjdlhf) returns the type

If either number is a float the result of a mathematical operation will be a float

division of ints doesn't return the remainder

>= at least, <= at most

???Is literal another word for operand???
???Expression???

A variable is a name that is tied to an object.
An object can have one name, many names, or no names attached to it.

Reserved Word or KeyWords have special meanings in python and so cannot be used in any other context, as a variable, function etc.
In 2.7 they are: and, as, assert, break, class, continue, def, del, elif, else, except, exec, finally, for, from, global, if, import, in, is, lambda, not, or, pass, print, raise, return, try, with, while, yield.

We can print multiple objects and assign multiple variables in one line

When using the assign operator, =, all values to the right are evaluated and returned free from their original components. We get pure objects back. Then they're glued to the name.

A conditional's default false block is pass
A conditional's true block does not provide a default. It is a mandatory field

You can think of there being programs within programs.
A branching program can contain several straight line programs.
A straightline program can contain several branching programs.

else and elif ???consider when to use each???

straight-line programs are O(n)
branching programs are O(n/2 + 1)
Both are calculations of constant complexity
runtime does not depend upon the number of inputs
"A program for which the maximum run time is bounded by the length of the program
is of constant complexity"

Straight-Line and Branching programs can only solve very simple problems, like arithmetic with a fixed number of inputs. Is there no limit on the number of inputs? There must be, otherwise it would become a linear complexity problem 
They cannot solve any problems of non-constant complexity.
Ex. If you wanted to count up the number of votes cast in an election you would have to look at each vote at least once. Thus if x is the number of votes cast then you need at least x steps to finish the calculation. As x gets larger the portion of code that has been repeated for each ballot becomes the dominant factor in determining the number of steps involved, constant complexity code takes a back seat in determining run time because as we approach infinity, constants make no difference. In REALITY no program is perfectly linear, there will always be at least one line of code that is not part of the repeated, looping poriton of the code. This is Linear Complexity. so there is always a 1, ie. O(n + 1) or O(2n/7 + 1) etc.

Iterating-Programs can be of arbitrary complexity

Note on Overloading + and *
3 * 5 == 3 + 3 + 3 + 3 + 3 ==
3 * 'C' == 'C' + 'C' + 'C' + 'C' + 'C' == 'CCCCC'

In Python strings are greater than numbers, ex: '3' < 5 is False

There are several sequence types. String is one of them
Indexing extracts individual characters. Begins from 0
Slicing extracts substrings

"Coding = Finger Exercise" - Guttag (holy god...what an academic)

???Relation between turing completeness and recursion/looping???
???Example of straight/line branching programs in real life/stored computers???
???Can the turing machine's 'tape' be represented by a python list???
???Full list of sequence operations???
???Why does indexing start at zero???